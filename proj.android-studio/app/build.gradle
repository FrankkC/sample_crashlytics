buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 22
    buildToolsVersion "25.0.3"

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

    defaultConfig {
        applicationId "it.redbitgames.test"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 2
        versionName "1.0"

        externalNativeBuild {
            ndkBuild {
                targets 'MyGame'
                arguments 'NDK_MODULE_PATH=$cocospath:$cocospath/cocos:$cocospath/external'
                arguments '-j' + Runtime.runtime.availableProcessors()
                arguments 'NDK_TOOLCHAIN_VERSION=clang'
                abiFilters 'armeabi-v7a'
            }
        }

        ndk {
            abiFilters 'armeabi-v7a'
        }

    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        //jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')

    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.6@aar') {
        transitive = true;
    }
}

crashlytics {
    enableNdk true
    androidNdkOut 'build/intermediates/ndkBuild/release/obj/local'
    androidNdkLibsOut 'build/intermediates/ndkBuild/release/obj/local'
}

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'
}

clean.dependsOn cleanAssets
preBuild.dependsOn copyAssets
